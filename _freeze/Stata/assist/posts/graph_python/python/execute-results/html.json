{
  "hash": "9328c502ba23c10844c2a3715038c102",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"**Faire des graphiques sous Stata avec Python**\"\n\ntitle-block-banner: false\n\nauthor: \n  - name: \"Marc Thévenin\"\n    affiliations:\n      - name: \"Ined\"\n\ndate: 10/03/2022\n\ncategories:\n  - graphique\n  - python\n\nfig-cap-location: top\n\nformat: \n  html: default\n  docx:\n    toc: true\n    number-sections: true\n\nfilters:\n   - lightbox\nlightbox: auto\n\nabstract: |\n Il s'agit d'une courte présentation de l'utilisation de Python sous Stata pour générer des graphiques. Après quelques éléments sur l'installation de Python et son utilisation avec Stata, trois exemples de graphiques sont données avec  les librairies **`seaborn`**, **`plotnine`** (wrapper de ggplot2) et **`plotly`** (graphiques intéractifs).   \n\n---\n\n\n\n\n\n**Quelques généralités sur l'utilisation de Python avec Stata**   \n\n* Depuis la version 16 de Stata (printemps 2019) il est possible d'utiliser Python de manière intéractive  avec l'application.\n* Une librairie Python  `SFI` (https://www.stata.com/python/api16/Data.html) est mise à disposition pour favoriser cette interactivé. J'en ai pas eu besoin pour ce document, le code étant par ailleurs assez complexe.\n* Niveau édition, une librairie Python officielle a été mise à disposition pour utiliser Stata sous **Jupyter** et **Spyder** si on utilise une version **Conda** de Python. Des noyaux Stata  sont disponibles depuis de nombreuses années pour le notebook **Jupyter**.   et fonctionne très bien. Je conseille vivement le dernier en date **`nbstata`**.\n* Dans Stata, plusieurs commande on été implémentée pour gérer l'utilisation de python: **`help python`**\n* Des éléments de correspondance Stata-Python pour la manipulation des données (librairie`pandas`) sont disponibles  sur  <https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_stata.html#compare-with-stata>. Comme dans R, une fonction permet d'importer une base Stata en python.\n\n\n::: callout-tip\nLes macros Stata sont reconnues dans un code Python et appelées dans le code de manière classique avec des quotes pour les macro temporaire ou $ pour les macro en dur. \n:::\n\n\nDans ce support, seul les graphiques seront exécutés avec Python, les manipulations en amont étant faite avec Stata. Seuls le chargement des bases seront effectués avec la fonction `read_Stata` de la librairie **`pandas`**.  \n\n\n# Installation de Python et des librairies [Windows]\n\n\n## Installation de python \n\n::: callout-note\n\n## Installation à l'Ined\n\nVous pouvez maintenant installer directement Python avec l'application **applined** développée par le service informatique\n\n:::\n\n\nJe ***déconseille vivement*** d'installer Python via une distribution *conda* pour générer seulement des graphiques. Un bug systématique se produira lorsque qu'un script *matplotlib* sera exécuté, faisant crasher la session de Stata. On\npeut remédier à ce problème facilement via une ligne de programme à insérer dans un fichier .profile, mais autant éviter un problème que d'y remédier.\n\n**WARNING**\nPour utiliser Python, vous devez avoir le même type de built pour les deux applications:  \n\n* Stata 64 bits <=> Python 64 bits\n* Stata 32 bits <=> Pyhon  32 bits\n\nA l'Ined, la version Stata est en 64b\n\n* *Python 64* Installation Standard: <https://www.python.org/downloads/windows/>\n* *Python 32* Installation Standard: <https://www.python.org/downloads/>\n\n::: callout-important\n## Installation de Python \n\n- Cocher *\"Add Python 3.10 to PATH\"* (si version 3.10)\n\n![***Variable environnement***](img/graph0a.png){width=50%, fig-align=\"left\"}\n\n- Après avoir cliquer sur *Install Now* conserver l'installation de *pip* qui permet de gérer les librairies, en particulier de les installer et de les mettre à jour\n\n![***Installation de pip****](img/graph0b.png){width=50%, fig-align=\"left\"}\n\n:::\n\n\n\n\n**Vérification de la reconnaissance de Python sous Stata**\n\n\n::: {.cell}\n\n```{.stata .cell-code}\npython query\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Python Settings\n      set python_exec      C:/Users/thevenin_m/AppData/Local/Programs/Python/Py\n> thon310/python.exe\n      set python_userpath  \n\n    Python system information\n      initialized          yes\n      version              3.10.5\n      architecture         64-bit\n      library path         C:\\Users\\thevenin_m\\AppData\\Local\\Programs\\Python\\Py\n> thon310\\python310.dll\n```\n\n\n:::\n:::\n\n\n**Test exécution de python dans un .do**\n\n::: {.cell filename='Dans un .do'}\n\n```{.stata .cell-code}\npython: \nprint(\"Ined forever!!!!\")\n1+1\nend  \n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n----------------------------------------------- python (type end to exit) -----\n>>> print(\"Ined forever!!!!\")\nIned forever!!!!\n>>> 1+1\n2\n>>> end  \n-------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n**Test de reconnaisance des macros Stata avec Python**\n\n\n::: {.cell filename='Dans un .do'}\n\n```{.stata .cell-code}\nlocal  x=5\nglobal m \"Salut\"\n\npython: \nprint(\"$m\")\n`x'/2\nend  \n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n----------------------------------------------- python (type end to exit) -----\n>>> print(\"$m\")\nSalut\n>>> `x'/2\n2.5\n>>> end  \n-------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n## Installation des libraries\n\n**Vérification des librairies installées** \n\nDans le terminal windows pour garder le prompteur ouvert. ^[touche windows + R et taper cmd dans la fenêtre qui s'ouvre / taper cmd dans la fenêtre de recherche de la barre de tache. On peut attacher le prompteur à la barre de tâche pour l'ouvrir directement par la suite]\n\n\n::: {.cell filename='Dans le terminal de commande windows'}\n\n```{.stata .cell-code}\npip list\n```\n:::\n\n\n\nInstallation d'une librairie. De préférence dans le terminal \n\n::: {.cell filename='Dans le terminal de commande windows'}\n\n```{.stata .cell-code}\npip install plotnine\n```\n:::\n\n\nOu dans Stata:\n\n::: {.cell}\n\n```{.stata .cell-code}\n! pip install plotnine\n```\n:::\n\n\n\nLibrairies nécessaire pour la suite de cette documentation: **`pandas`** (installe `numpy`), **`matplotlib`**, **`seaborn`**, **`plotnine`**, **`plotly`**\n\n\n::: {.cell}\n\n```{.stata .cell-code}\npip install pandas\npip install matplotlib\npip install seaborn\npip install plotnine\npip install plotly\n```\n:::\n\n\n\n\n# Deux exemples de graphiques\n\n\n### Exemple 1 avec `seaborn`\n\n- Exécution d'un graphique avec la librairie `seaborn`. La fonction `pairplot()`, affiche une matrice de distribution croisée entre les variables de la base. L'option `hue=\"forein\"` (comprendre *couleur*), permet de stratifier les distributions par   \n- Le graphique est enregistré avec la fonction `savefig()`.  \n- Le graphique est affiché avec la fonction `plt.show()` de `matplotlib`.\n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\n* Stata\nqui sysuse auto, clear\nqui keep price mpg displacement gear_ratio turn foreign\nqui save auto, replace\n\n* Python\nqui python:\nimport pandas as pa \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pa.read_stata('auto.dta')\n\ng = sns.pairplot(df, hue=\"foreign\")\ng.savefig(\"D:/D/Marc/SMS/STATA INED/Graphiques/programmation/python/img/graph1.png\")\nend\n\n* Affichage du graphique sous commande windows\n* ! \"D:/D/Marc/SMS/STATA INED/Graphiques/programmation/python/img/graph1.png\"\n\n```\n:::\n\n\n\n![seaborn: fonction `pairplot`](img/graph1.png){width=80%}\n\n### Exemple 2 avec `plotly` \n\n- Un graphique intéractif avec la fonction **`px.violin`** de la librairie `plotly` \n- Avec Stata, on a sélectionné la variable avec une macro temporaire, qui est reconnu tel quel dans le code python: ``y=\"`x'\"``. Le graphique se mettra donc à jour automatiquement en changeant le nom de la variable dans la définition de la macro. \n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\n\nsysuse auto, clear\nlocal x price\ngen rep78b= rep78>3\nsave auto, replace\n\npython: \nimport pandas as pa \nimport plotly.express as px\n\ndf =  pa.read_stata('auto.dta')\ng = px.violin(df, y=\"`x'\", \n                  x=\"rep78b\", \n\t\t\t\t  color=\"foreign\", box=True, points=\"all\")\ng.update_layout(\n    title=\"Violin plot avec plotly\",\n    xaxis_title=\"REP78b\",\n    yaxis_title=\"`x'\",\n    legend_title=\"Foreign\",\n    font=dict(\n        family=\"Arial\",\n        size=24,\n        color=\"black\"\n    ))\t\ng.write_html(\"D:/D/Marc/SMS/STATA INED/Graphiques/programmation/python/img/graph2.html\")\t\nfig.show()\n\nend\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: le package 'htmltools' a été compilé avec la version R 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in file(con, \"r\"): impossible d'ouvrir le fichier 'D:/D/Marc/SMS/STATA\nINED/Graphiques/programmation/python/img/graph2.html' : No such file or\ndirectory\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(con, \"r\"): impossible d'ouvrir la connexion\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}