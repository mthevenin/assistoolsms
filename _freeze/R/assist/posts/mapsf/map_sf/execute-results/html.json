{
  "hash": "723a6e80379b2945849770998f9d152c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Premiers pas en cartographie avec R\"\nauthor: \n  - name: \"Bénédicte Garnier\"\n    affiliations:\n      - name: \"Ined\"\ncategories:\n  - Cartographie\n  - Fond de carte\n\ndate: 08/26/2024\n\nlang: fr\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    embed-resources: true\neditor: \n  markdown: \n    wrap: 72\n\nabstract: | \n  Le package mapsf permet de générer des cartes simplement. Toutefois, il convient de choisir le type de carte adaptés aux données à représenter et parfois adapter le fond de carte. Nous présentons ici des statistiques sur les arrondissements de Paris.\n---\n\n\nAdaptation de la fiche *Mapsf* de Coralie Cottet (2023).\n\n::: callout-tip\n## Les étapes pour représenter des indicateurs simples sur une fond de carte\n\nImporter dans R - le fond de carte des arrondissements de Paris\n(*données géométriques*) - le tableau des indicateurs à représenter\n(*données attributaires*)\\\nUtiliser le *package mapsf* - choisir le type de carte adapté aux\ndonnées à représenter. - habiller la carte (titre, légende, ..) -\nexporter la carte produite au format désiré (vectoriel ou image)\n:::\n\n| Packages   | Fonctions             |\n|------------|-----------------------|\n| **sf**     | `st_read` ,`st_union` |\n| **mapsfr** | `mf_map`              |\n| **mapsfr** | `mf_theme`            |\n| **mapsfr** | `mf_label`            |\n| **mapsfr** | `mf_title`            |\n\nSi nécessaire, installation des packages avec la commande \n`install.packages(\"mapsf\",\"sf\",\"dplyr\")`\n\n# Appel des packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttachement du package : 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n# Les données\n\n## Les données géométriques\n\nLes **formats** les plus courants en cartographie automatique sont :\n\n-   *GeoJSON*, basé sur JSON (JavaScript Object Notation) qui permet de\n    stocker des données géographiques sous forme de caractères.\n-   *Shapefile*, plus ancien, développé par Esri. c'est un ensemble de\n    fichiers qui stockent des informations sur les entités géographiques\n    et leurs attributs.\n\nLe fond de carte utilisé ici correspond aux limites des arrondissements\nde Paris, il est au format GeoJSON. On va lui ajouter les voies d'eau\n(Seine et canaux). On importe ces 2 couches à partir du site\n*opendata.paris.fr*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrondissements <- st_read(dsn = \"https://opendata.paris.fr/explore/dataset/arrondissements/download/?format=geojson&timezone=Europe/Berlin&lang=fr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `OGRGeoJSON' from data source \n  `https://opendata.paris.fr/explore/dataset/arrondissements/download/?format=geojson&timezone=Europe/Berlin&lang=fr' \n  using driver `GeoJSON'\nSimple feature collection with 20 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2.224078 ymin: 48.81558 xmax: 2.469761 ymax: 48.90216\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ncours_deau<-st_read(dsn=\"https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/plan-de-voirie-voies-deau/exports/geojson?lang=fr&timezone=Europe%2FBerlin\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `OGRGeoJSON' from data source \n  `https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/plan-de-voirie-voies-deau/exports/geojson?lang=fr&timezone=Europe%2FBerlin' \n  using driver `GeoJSON'\nSimple feature collection with 58 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.224081 ymin: 48.81924 xmax: 2.450555 ymax: 48.90207\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n### Affichage des contours des arrondissements et des cours d'eau à Paris\n\nOn superpose 3 couches différentes : les polygones représentant les\ncontours des arrondissements, les numéro des arrondissements et les\ncours d'eau.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_theme(\"candy\")\n# Arrondissements\nmf_map(x = arrondissements, border = \"black\") \n\n# plot labels\nmf_label(\n  x = arrondissements,\n  var = \"c_ar\",\n  col = \"black\",\n  cex = 0.8,\n)\n\n# Ajout des cours d'eau\nmf_map(x=cours_deau,lwd=2,border=\"lightblue\",col=\"lightblue\",add=TRUE)\n\nmf_title(\"Les arrondissements de Paris\")\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Les indicateurs à représenter et le choix du type de carte\n\nLe tableau suivant contient les identifiants des arrondissements de\nParis, les bords politiques des élus aux élections municipales de 2020\net les effectifs des populations de ces arrondissements.\\\nSources :\\\n- [Le parisien du\n29-06-2020](https://www.leparisien.fr/elections/municipales/municipales-le-second-tour-a-paris-decrypte-en-six-cartes-29-06-2020-8343966.php)\\\n- [Insee - Chiffres détaillés, Comparateur de\nterritoires](htts://www.insee.fr/fr/statistiques/2521169) - Mise en\nligne le 27/06/2024.\n\n| Codgeo | Libelle                  | Municipalités | Population en 2021 |\n|--------|--------------------------|---------------|--------------------|\n| 75101  | Paris 1er Arrondissement | PS, EELV      | 15919              |\n| 75102  | Paris 2e Arrondissement  | PS, EELV      | 21119              |\n| 75103  | Paris 3e Arrondissement  | PS, EELV      | 32793              |\n| 75104  | Paris 4e Arrondissement  | PS, EELV      | 28324              |\n| 75105  | Paris 5e Arrondissement  | LR, LREM      | 56841              |\n| 75106  | Paris 6e Arrondissement  | LR            | 40209              |\n| 75107  | Paris 7e Arrondissement  | LR            | 47947              |\n| 75108  | Paris 8e Arrondissement  | LR            | 35123              |\n| 75109  | Paris 9e Arrondissement  | LREM          | 58951              |\n| 75110  | Paris 10e Arrondissement | PS, EELV      | 83543              |\n| 75111  | Paris 11e Arrondissement | PS, EELV      | 142583             |\n| 75112  | Paris 12e Arrondissement | PS, EELV      | 140954             |\n| 75113  | Paris 13e Arrondissement | PS, EELV      | 178350             |\n| 75114  | Paris 14e Arrondissement | PS, EELV      | 136368             |\n| 75115  | Paris 15e Arrondissement | LR            | 227746             |\n| 75116  | Paris 16e Arrondissement | LR            | 162061             |\n| 75117  | Paris 17e Arrondissement | LR            | 164413             |\n| 75118  | Paris 18e Arrondissement | PS, EELV      | 188446             |\n| 75119  | Paris 19e Arrondissement | PS, EELV      | 181616             |\n| 75120  | Paris 20e Arrondissement | PS, EELV      | 189805             |\n|        |                          |               |                    |\n\nLes 4 premiers arrondissements ont été regroupés en une seule entité\ndans le cadre des élections municipales (étiquette PS, EELV). Nous\nverrons plus loin comment modifier le fond de carte pour représenter\ncette information sur une carte.\n\n**Identifier le type de donnée à représenter** car cela va conditionner\nle type de carte à utiliser\n\n\n::: {.box_img}\n![cf T. Giraud](arbre_type_data.png){width=\"75%\"}\n:::\n\nNous disposons donc d'une *variable de stock* : la population des\narrondissements, d'une *variable qualitative nominale* : le bord\npolitique de la mairie et nous pourrons calculer une *variable\nquantitative absolue* : la densité de population de chaque\narrondissement car nous avons la superficie de chaque arrondissement\n(st_area) dans le data frame correspondant au fond de carte.\n\n## Générer des cartes adaptées aux données\n\n### La population par arrondissements\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Tri de la table des arrondissements selon leur numéro\narrondissements2 = arrondissements %>% arrange(c_arinsee)\n\n#Ajout des valeurs des populations de chaque arrondissements dans une nouvelle colonne nommée \"population\"\narrondissements2$population <- c(15919, 21119, 32793, 28324, 56841, 40209, 47947, 35123, 58951, 83543, 142583, 140954, 178350, 136368, 227746, 162061, 164413, 188446, 181616, 189805) \n#La valeur 15919 correspond à la population dans le 1er arrondissement.\n```\n:::\n\n\nOn affiche une **carte en symboles proportionnels** car c'est la méthode\nà utiliser pour visualiser des variables de stocks. La surface des\ncercles représente l'effectif de la population pour chaque\narrondissement.\n\nLa fonction `map_sf()` sert à indiquer la variable à représenter\n(var=population), et le type de carte (type=prop).\n\nOn **habille** la carte en y ajoutant une légende et un titre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(x = arrondissements2)\nmf_map(\n  x = arrondissements2,\n  var = \"population\" ,\n  type = \"prop\",  \n  leg_title = \"Effectif de la population\\ en 2021\",\n  col=\"#C24168\",\n  add= TRUE,\n  inches=0.2)\n\nmf_title(\"La population des arrondissements de Paris\")\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### La densité de population de chaque arrondissement\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calcul de la densité de population par arrondissements  \narrondissements2$densite <- 1e6 * arrondissements2$population / as.numeric(st_area(arrondissements2))\n```\n:::\n\n\nOn va ici générer une **carte choroplèthe** (ou en aplat de couleur) car\nc'est la méthode à utiliser pour visualiser des ratios (variables\nquantitatives relatives).\n\nOn utilise la méthode des quantiles pour discrétiser la variable\ndensite, et on applique une palette de couleurs séquentielles avec\ndégradé pour représenter l'ordre entre les valeurs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(\n  x = arrondissements2,\n# variable à représenter: densité de population  \nvar = \"densite\",\n# type de carte  \ntype = \"choro\",\n# méthode de dsicrétisation\n  breaks = \"quantile\",\n# palette de rouges  \npal = \"Reds\",\n  lwd = 1,\n  leg_title = \"Densité de population\\n(habitants par km2)\", \n  leg_val_rnd = 0\n)\n\nmf_title(\"Les densités de population des arrondissements de Paris\")\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNota Bene : Les 12e et 16e arrondissements sont très eu denses car sont\ncomposés des bois de Vincenne et de Boulogne.\n\n### Le \"bord politique\" des mairies\n\nPour les élections municipales de 2020, les 4 premiers arrondissements\nde la ville ont été fusionnés dans une zone appelée *Centre*, et le\nchoix de la localisation de mairie s'est porté sur le 3ème\narrondissement. Nous devons créer un nouveau fond de carte où on\nfusionne les 4 polygones correspondants à ces 4 arrondissements avec la\nfonction `st_union`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Louvre  \npoly1 = arrondissements2[arrondissements2$c_ar == \"1\", ] \n# Bourse\npoly2 = arrondissements2[arrondissements2$c_ar == \"2\", ]\n# Temple\npoly3 = arrondissements2[arrondissements2$c_ar == \"3\", ]\n# Hôtel de Ville\npoly4 = arrondissements2[arrondissements2$c_ar == \"4\", ]\n# Fusion des polygones\npoly12   = st_union(poly1,poly2) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\npoly34   = st_union(poly3,poly4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\ncentre = st_union(poly12,poly34)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code}\ncentre$l_aroff = \"Centre\" # changer le nom de l'arrondissement\ncentre$c_ar    =  \"3\"     # On prend le code qui correspond au 3e arrondissement\n\n# On garde les arrondissemnts qui ne sont pas au centre\n\narrondissementsp <- arrondissements2 %>%\n  filter(c_ar > 4) %>%\n  select(c_ar, l_aroff, surface, l_ar, n_sq_co, c_arinsee, n_sq_ar, perimetre, geom_x_y, geometry)\n\ncentre_fus = subset(centre, select = c(c_ar, l_aroff,surface, l_ar, n_sq_co, c_arinsee, n_sq_ar, perimetre, geom_x_y, geometry))\n\n\n# Combiner les data frames et sélectionner les colonnes en une seule étape\narrondissementsnew = rbind(centre_fus, arrondissementsp) %>%\n  select(c_ar, l_aroff, geom_x_y, geometry)\n\nmf_map(x = arrondissementsnew,border= \"black\")\nmf_title(\"Le découpage des municipalités de Paris\")\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nOn va représenter cette variable de type *qualitative nominale* (ici\nbords politiques des mairies de chaque arrondissement), par un symbole\nde couleur sans dégradé (palette qualitative).\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrondissementsnew$bords_politiques <- c(\"PS, EELV\", \"LR, LREM\", \"LR\", \"LR\", \"LR\", \"LREM\", \"PS, EELV\", \"PS, EELV\", \"PS, EELV\", \"PS, EELV\", \"PS, EELV\", \"LR\", \"LR\", \"LR\", \"PS, EELV\", \"PS, EELV\", \"PS, EELV\")\n\n# Choix des couleurs\n\nlevels(as.factor(arrondissementsnew$bords_politiques))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"LR\"       \"LR, LREM\" \"LREM\"     \"PS, EELV\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# PS, EELV en \"#d175b8\", LR, LREM en \"#8856a7\", LR en \"#3182bd\" et LREM en \"#e6550d\"\ncolors <- c(\"#3182bd\", \"#1c9099\", \"#e6550d\",\"#c51b8a\")\n\n# Placer les carrés sur les centroïdes des polygones des arrondissements.\narr_c<-st_centroid(arrondissementsnew)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code}\nmf_map(x = arrondissementsnew, border = \"black\")\n\n# Choix  du symbol rectangle (pch=15)\nmf_map(\n  x = arr_c,\n  var = \"bords_politiques\",\n  pal=colors,\n  type=\"symb\",\n  pch=15,\n  cex = 2,\n  lwd = .5,\n  leg_title = \"\",\n  border=\"black\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nthe length of pch does not match the number of modalities. The first pch is used for all modalities\n```\n\n\n:::\n\n```{.r .cell-code}\n# habillage \nmf_layout(\n  title = \"Bords politiques aux élections municipales de 2020\",\n  credits = paste0(\"mapsf \", packageVersion(\"mapsf\")),\n  arrow = FALSE,  # Désactiver l'orientation\n  scale = FALSE  # Désactiver l'échelle\n)\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nIl est plus courant de représenter les cartes électorales par des cartes\nchloroplèthe. Ainsi par rapport à la carte précédente, il faut utiliser\n`type=\"typo\"` et de retirer l'argument pch. On ajoute également le\nnuméro de l'arrondissement avec la fonction `mf_label`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmf_map(\n  x = arrondissementsnew,\n  # var à représenter  \n  var = \"bords_politiques\",\n  pal=colors,\n  type=\"typo\",\n  cex = 2,\n  lwd = .5,\n  leg_title = \"\",\n  leg_pos= c(2.43, 48.91396),\n  border=\"black\"\n)\n\nmf_layout(\n  title = \"Bords politiques aux élections municipales de 2020\",\n  credits = paste0(\"mapsf \", packageVersion(\"mapsf\")),\n  arrow = FALSE,  # Désactiver l'orientation\n  scale = FALSE   # Désactiver l'échelle\n  )\n\nmf_label(\n  x = arrondissementsnew, var = \"c_ar\", col = \"grey\", halo = FALSE, overlap = FALSE, lines = FALSE,\n)\n\n# Ajout des cours d'eau\nmf_map(x=cours_deau,lwd=2,border=\"lightblue\",col=\"lightblue\",add=TRUE)\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Exporter les cartes\n\n### Au format image\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# export en format image (.png)\nmf_export( \n  x= arrondissementsnew,\n  filename =\"img/carte.png\", width = 600)\nmf_map(x = arrondissementsnew)\nmf_map(\n  x = arrondissementsnew,\n   var = \"population\" ,\n  type = \"prop\",   \n  leg_title = \"Population des arrondissements\",\n  col=\"#C24168\",\n  add= TRUE,\n  inches=0.2)\nmf_arrow()\nmf_credits (txt = \"Fait avec mapsf de T. Giraud\",pos = \"bottomright\",font = 2)\nmf_title(txt = \"Ma carte\")\ndev.off()\n```\n:::\n\n\n::: {.callout-warning title=\"Attention\"}\nToujours utiliser `add = TRUE` après un appel à `mf_export()` et ne pas\noublier d'utiliser `dev.off()` pour finaliser l'export de la figure.\n:::\n\n### Au format vectoriel\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# format vectoriel (.svg)\nmf_export( \n  x= arrondissementsnew,\n  filename =\"img/carte.svg\", width = 600)\nmf_map(x = arrondissementsnew)\nmf_map(\n  x = arrondisst4,\n   var = \"population\" ,\n  type = \"prop\",   \n  leg_title = \"Population des arrondissements\",\n  col=\"#C24168\",\n  add= TRUE,\n  inches=0.2)\nmf_arrow()\nmf_credits (txt = \"Fait avec mapsf de T. Giraud\",pos = \"bottomright\",font = 2)\nmf_title(txt = \"Ma carte\")\ndev.off()\n```\n:::\n\n\n::: callout-note\n## En savoir plus\n\n-   pour afficher la vignette contenant des scriprs commentés sur\n    commment créer des cartes, exécuter le code\n    `vignette(topic = \"mapsf\", package = \"mapsf\")`\n-   sur le choix du type de carte\n    [riatelab.github.io/mapsf/articles](https://riatelab.github.io/mapsf/articles/mapsf.html#symbology)\n-   sur la cartographie avec R\n    [rcarto.github.io/cartographie_avec_r](https://rcarto.github.io/cartographie_avec_r/)\n:::\n",
    "supporting": [
      "map_sf_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}