{
  "hash": "7b64f8fd9b81e1bcb25e82e444fb39b4",
  "result": {
    "markdown": "---\ntitle: \"Réaliser des cartes thématiques avec Mapsf\"\n\ncategories:\n  - Cartographie\n  \nauthor: \n  - name: \"Coralie Cottet\"\n    affiliations:\n      - name: \"Ensai-Ined\"\n\ndate: 07/27/2023\n\nimage: \"logo.png\"\n\nformat: \n  html: default\n  docx: default\n\nfilters:\n  - lightbox\nlightbox: auto\n\nabstract: |\n Nous allons montrer comment réaliser des cartes avec R à l'aide du package **`mapsf`** (T.Giraud) et du packages **`sf`**. Le package \"mapsf\" est un outil très utile pour manipuler et visualiser des données spatiales en R, tandis que le package \"sf\" fournit une infrastructure pour stocker et manipuler ce type de données. Ces deux outils sont une solution simple et pratique pour réaliser ce type d'analyse. \n\n---\n\n\n\n![](logo.png){width=10%}\n\n**Documentation** (Timothé Giraud):  \n\n*  <https://rcarto.github.io/ined2022/07_mise_en_page.html>\n\n* <http://riatelab.github.io/mapsf>\n\n* <http://rgeomatic.hypotheses.org/2077>\n\n\n\n**Installation des packages**: \n\n```markdown\ninstall.packages(mapsf)\ninstall.packages(sf)\ninstall.packages(dplyr)\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapsf)\nlibrary(sf)\nlibrary(dplyr)\n```\n:::\n\n\n\n\nNous allons réaliser une carte de Paris avec les données du site de Paris Data [[Lien](http://opendata.paris.fr/pages/catalogue/?disjunctive.theme&disjunctive.publisher)]\n\n\n# Importation des données\n\nIl existe plusieurs formats de fond de carte:\n\n* **GeoJSON** est un format de données géospatiales basé sur JSON (JavaScript Object Notation) qui permet de stocker des données géographiques sous forme de caractères.\n\n* **Shapefile** est un format de données géospatiales propriétaire développé par *Esri* (Environmental Systems Research Institute). Il est constitué de plusieurs fichiers qui stockent des informations sur les entités géographiques telles que les points, les lignes et les polygones, ainsi que des attributs associés à ces entités. \n\n\nIci le fond importé est en format *GeoJSON*, il correspond aux limites des arrondissements.  On va lui ajouter celui des voies d'eau en couche d'habillage.\n\n\n\n\n::: {.cell filename='Importation des données' result='false'}\n\n```{.r .cell-code}\narrondissements <- st_read(dsn = \"https://opendata.paris.fr/explore/dataset/arrondissements/download/?format=geojson&timezone=Europe/Berlin&lang=fr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `OGRGeoJSON' from data source \n  `https://opendata.paris.fr/explore/dataset/arrondissements/download/?format=geojson&timezone=Europe/Berlin&lang=fr' \n  using driver `GeoJSON'\nSimple feature collection with 20 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2.224078 ymin: 48.81558 xmax: 2.469761 ymax: 48.90216\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\ncours_deau<-st_read(dsn=\"https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/plan-de-voirie-voies-deau/exports/geojson?lang=fr&timezone=Europe%2FBerlin\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `OGRGeoJSON' from data source \n  `https://opendata.paris.fr/api/explore/v2.1/catalog/datasets/plan-de-voirie-voies-deau/exports/geojson?lang=fr&timezone=Europe%2FBerlin' \n  using driver `GeoJSON'\nSimple feature collection with 58 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.224081 ymin: 48.81924 xmax: 2.450555 ymax: 48.90207\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell filename='Affichage du fond de carte des arrondissements'}\n\n```{.r .cell-code}\nmf_map(x = arrondissements, border = \"black\") \n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-docx/unnamed-chunk-3-1.png)\n:::\n:::\n\n\n\n{r filename=\"Affichage des cours d'eau\"}\nmf_map(x=cours_deau,lwd=2,border=\"lightblue\",col=\"lightblue\",add=TRUE)\n\n\n\n\n::: {.cell filename='Fond noir'}\n\n```{.r .cell-code}\nmf_theme(\"darkula\")\n```\n:::\n\n\n\n\n\n# Différents types de cartes\n\n\n![](arbre_type_data.png)\n\n## Les cartes à symboles proportionnels\n\nLa  carte en symboles proportionnels est la méthode de représentation graphique à utiliser pour visualiser des variables de stocks (variables quantitatives absolues pour lesquelles la somme et la moyenne ont une signification).\n\nSur la carte, on affiche l'effectif de la population de chaque arrondissement et on ajoute la légende et un titre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Ajout manuel des valeurs des populations de chaque arrondissements dans le tableau sous le nom \"pop\"\narrondissements$pop <- c(1012687, 903036, 1369857, 1491027, 1672009, 1506475, 1637163, 1603380, 1637542, 1059282, 1494945, 1436205, 1705774, 1425805, 236769, 1668605, 1674568, 1539668, 1421827, 1829526) #INSEE,2021. La valeur 1012687 correspond à la population dans le 1er arrondissement.\n```\n:::\n\n\n\n\n* Pour représenter la carte, on utilise la fonction `map_sf()`. On doit indiquer à minima la variable liée à la statistique (`var=pop`), et le type de carte (`type=prop`). \n* On va superposer 2 cartes: le fond affichant seulement les limites des arrondissements, et celle affichant sous forme de bulle proportionnelles la taille de la population dans chaque arrondissement.\n\n\n\n\n::: {.cell filename='Carte avec la fonction mf_map()'}\n\n```{.r .cell-code}\nmf_map(x = arrondissements)\nmf_map(\n  x = arrondissements,\n  var = \"pop\" ,\n  type = \"prop\",  \n  leg_title = \"Population totale\\12 271 794\",\n  col=\"blue\",\n  add= TRUE,\n  inches=0.2)\n\nmf_title(\"Distribution de la population dans les arrondissements de Paris\")\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-docx/unnamed-chunk-5-1.png)\n:::\n:::\n\n\n\n## Les cartes choroplèthes\n\nLa *carte choroplèthe* est la représentation  à utiliser pour visualiser des ratios (variables quantitatives relatives pour lesquelles la moyenne a un sens, mais dont la somme n'en a pas), et qui sont des variables ordinales.\n\nSur la carte, on affiche la densité de population de chaque arrondissement. On utilise ici la méthode des quantiles pour discrétiser cette variable, et on applique une palette de couleurs séquentielles avec dégradé pour représenter l'ordre entre les valeurs.\n\n\n\n::: {.cell filename='Variable densité de la population'}\n\n```{.r .cell-code}\n#création de la variable densite \narrondissements$DENS <- 1e6 * arrondissements$pop / as.numeric(st_area(arrondissements))\n```\n:::\n\n::: {.cell filename='Carte avec la fonction mf_map()'}\n\n```{.r .cell-code}\nmf_map(\n  x = arrondissements,\n# variable à représenter: densité de population  \nvar = \"DENS\",\n# type de carte  \ntype = \"choro\",\n# méthode de dsicrétisation\n  breaks = \"quantile\",\n# palette de rouges  \npal = \"Reds\",\n  lwd = 1,\n  leg_title = \"Densité de population\\n(habitants par km2)\", \n  leg_val_rnd = 0\n)\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-docx/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n\n\n::: callout-note \nla faible densité de population des 12e et 16e arrondissement résulte notamment des zônes *bois de Vincennes* et de *Bois de Boulogne* qui les composent.\n:::\n\nOn peut aussi représenter un autre type de variable: qualitative nominale. Pour illuster cette fiche on va représenter les bords politiques des mairies de chaque arrondissement.\nPour cela, on produit une carte choroplèthes mais avec des couleurs *sans dégradé* (palettee qualitative).  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrondissements2 = select(arrondissements, c_ar, l_aroff, geom_x_y, geometry)\narrondissements2 = arrange(arrondissements2, c_ar)\n\nbords_politiques <- c(\"LR\", \"EELV\", \"PS\", \"PS\", \"LR\", \"LR\", \"LR\", \"LR\", \"LR\", \"PS\", \"PS\", \"PS\", \"PS\", \"PS\", \"LR\", \"LR\", \"LR\", \"PS\", \"PS\", \"PS\")\n# Le maire du 2e arrondissement de Paris était EELV entre 2014 et 2015.\n\n\narrondissements2 <- cbind(arrondissements2, bords_politiques)\n\n# Choix des couleurs\n\ncolors <- c(\"EELV\" = \"#00CC66\", \"LR\" = \"#0066CC\", \"PS\" = \"#FF0066\")\n\n# Pour placer les carrés sur les centroïdes des polygones représentant les arrondissements.\n\narr_c<-st_centroid(arrondissements2)\nmf_map(x = arrondissements2, border = \"black\")\n\n# Ajouter des rectangle (pch=15) remplis pour chaque arrondissement en fonction de son bord politique\nmf_map(\n  x = arrondissements2,\n  # var à représenter  \n  var = \"bords_politiques\",\n  pal=colors,\n  type=\"symb\",\n  pch=15,\n  cex = 2,\n  lwd = .5,\n  leg_title = \"\",\n  border=\"black\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nthe length of pch does not match the number of modalities. The first pch is used for all modalities\n```\n:::\n\n```{.r .cell-code}\nmf_layout(\n  title = \"Bord politique des maires de Paris entre 2014 et 2020\",\n)\n```\n\n::: {.cell-output-display}\n![](map_sf_files/figure-docx/unnamed-chunk-8-1.png)\n:::\n:::\n",
    "supporting": [
      "map_sf_files\\figure-docx"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}