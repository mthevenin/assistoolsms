{
  "hash": "c1b452c026a0d0bd7458f252672f2fc2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Récupérer et exécuter le test OLS de Grambsch-Therneau\"\n\n# toc-title: \"\"\n# subtitle: \"\"\n\ncategories:\n  - Test\n  \nauthor: \n  - name: \"Marc Thévenin\"\n    affiliations:\n      - name: \"Ined\"\n\ndate: 06/13/2023\n\nimage: \"https://m.media-amazon.com/images/P/1441931619.01._SCLZZZZZZZ_SX500_.jpg\"\n\nformat: \n  html: default\n  docx: default\n  pdf:  default \n\nfilters:\n   - lightbox\nlightbox: auto\n\nabstract:  |\n Comment récupérer la variante du test de Grambsch-Therneau implémentée au package `survival` avant son passage à la v3. Permet de s'assurer une reproductibilité avec les autres applications statistiques (Stata, Sas, Python) avec des durées discrètes.\n\n---\n\n\n\n| Package       | Fonctions                                       |\n|---------------|-------------------------------------------------|\n| **survival**  | `coxph` - `coxzph.old`                          |\n\n\n**Champ d'application** \n\n* Modèle de Cox (analyse des durées)  \n* Diagnostic sur l'hypothèse de proportionalité des risques  \n\n\n**Problématique**  \n\n- Depuis le passage à la version 3 du package **`survival`** en 2020, le test OLS sur les résidus de Schoenfeld a été supprimé et remplacé par le test GLS. Le second est la version originelle du test proposé en 1994 par P.Grambsch et T.Therneau.\n- En présence d'évènements simultanés (durée discrète), les résultats affichés par les deux versions peuvent fortement variés. \n- Lorsqu'on utilise le modèle de Cox avec des durées discrètes, situation très courante dans les sciences sociales, je préconise l'utilisation de la version dite *simplifiée* (OLS). \n  - Le modèle de Cox est une méthode à durée continue, les conditions de validité du test GLS ne sont établies avec des évènements mesurés simultanément.\n  - Contrainte de reproductibilité: **Stata**, **Sas**, **Python** (**`lifelines`**, **`statsmodels`**)  \n\n\n**Récupération et exécution du test OLS**\n\n\n- J'ai récupéré le script de la fonction dans les archives du CRAN. Elle a simplement été renommée  **`cox.zphold()`**.\n- Pour charger la fonction, il suffit d'appliquer  **`source()`** qui joue le même rôle que **`library()`**.\n  - Directement sur le dépôt github: \n    - **`source(\"https://raw.githubusercontent.com/mthevenin/analyse_duree/main/cox.zphold/cox.zphold.R\")`**\n  - Si le script a été enregistré en local: \n    - **`source(\"local_path/cox.zphold.R\")`**\n\n\n**Exemple** \n\n\n\n::: {.cell filename='Récupération des données'}\n\n```{.r .cell-code}\nlibrary(readr)\ntrans <- read.csv(\"https://raw.githubusercontent.com/mthevenin/analyse_duree/master/bases/transplantation.csv\")\n```\n:::\n\n::: {.cell filename='Estimation d\\'un modèle de Cox'}\n\n```{.r .cell-code}\nlibrary(survival)\ncoxfit = coxph(formula = Surv(stime, died) ~ year + age + surgery, data = trans)\n```\n:::\n\n::: {.cell filename='Réupération et exécution du test OLS'}\n\n```{.r .cell-code}\nsource(\"https://raw.githubusercontent.com/mthevenin/analyse_duree/main/cox.zphold/cox.zphold.R\")\ncox.zphold(coxfit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          rho chisq      p\nyear    0.159  1.96 0.1620\nage     0.109  1.15 0.2845\nsurgery 0.251  3.96 0.0465\nGLOBAL     NA  7.99 0.0462\n```\n\n\n:::\n:::\n",
    "supporting": [
      "coxzph_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}