{
  "hash": "f6f5fa11b011b922f36ff1e7ee26923c",
  "result": {
    "markdown": "---\ntitle: \"Modification de l'apparence des outputs avec un fichier .scss\"\n\n# toc-title: \"\"\n# subtitle: \"\"\n\ncategories:\n  - Output\n  - scss\n  - css\n  \nauthor: \n  - name: \"Marc Thévenin\"\n    affiliations:\n      - name: \"Ined\"\n\ndate: 06/20/2023\n\nimage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Sass_Logo_Color.svg/1200px-Sass_Logo_Color.svg.png\"\n\nformat: \n  html: default\n  docx: default\n  pdf:  default\n\nfilters:\n   - lightbox\n#   - nutshell\nlightbox: auto\n\nabstract: | \n A la suite d'un code, le report  de l'output console de Quarto (idem Rmarkdown) épouse le thème de la page. Il est possible de modifier son apparence, comme la couleur de fond et la présence d'un contour, à l'aide des variables sass et d'un code css ajoutés à un fichier .scss \n---\n\n\n\nPar défaut le rendu des outputs console bruts (`theme: default`) est le suivant:  \n\n![](img/img1.png)\n\n- Avec un fichier .scss on peut modifier le rendu de cet output. \n  -  Un fichier styles.scss est généré automatiquement à la création d'un projet\n  - Pour une page simple, on peut le créer facilement  facilement à partir d'un fichier de type texte, en le renommant avec l'extension `.scss`, par exemple `styles.scss`.\n- On ajoute des éléments de modification de l'apparence au fichier .scss\n- On indique dans le yaml de la page ou le _quarto.yml du projet qu'on applique ces modifications.  \n\n**Modifications de l'output console dans un fichier .scss** \n\n```markdown\n$code-block-stdoutcolor: #37424a;\n$code-block-stdoutcolor-light: rgba($code-block-stdoutcolor, 0.5);\n$code-block-stdoutcolor-lighter: rgba($code-block-stdoutcolor, 0.1);\n\n/*-- scss:rules --*/\n\n.cell-output-display pre, .cell-output-stdout pre {\n    background-color: $code-block-stdoutcolor-lighter !important;\n    border: 1.5px solid $code-block-stdoutcolor-light;\n    border-radius: .25rem;\n    border-left: 4px;\n    border-left-style: solid;\n    border-left-color: $code-block-stdoutcolor;\n    padding: .4em;\n    color: #37424a\n}\n\n\n.cell-output pre code {\n    background-color: transparent;\n}\n\n```\nIci on a modifier la couleur du fond (ici un gris:`#37424a`), l'épaisseur du contour (plus importante à gauche), le radius des angles du contour etc...\n\n\n**yaml de la page ou du template quarto.yml du projet**  \n\n\nPour le yaml d'une page simple avec le fichier styles.scss\n\n```markdown\n---\n\ntitle=\"Changement couleur output\"\n\nformat:\n  html:\n    theme: [default, style.scss]\n---\n```\n\nAprès exécution du programme, le rendu de l'output est le suivant:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(show.signif.stars=FALSE)\n\nsummary(lm(Sepal.Length~Petal.Length, data=iris))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Sepal.Length ~ Petal.Length, data = iris)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.24675 -0.29657 -0.01515  0.27676  1.00269 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)\n(Intercept)   4.30660    0.07839   54.94   <2e-16\nPetal.Length  0.40892    0.01889   21.65   <2e-16\n\nResidual standard error: 0.4071 on 148 degrees of freedom\nMultiple R-squared:   0.76,\tAdjusted R-squared:  0.7583 \nF-statistic: 468.6 on 1 and 148 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n",
    "supporting": [
      "output_scss_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}