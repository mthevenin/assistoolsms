---
title: "Déployer un contenu html sur gitlab"

categories:
  - Gitlab
  - Quarto
  
author: 
  - name: "Marc Thévenin"
    affiliations:
      - name: "Ined"

date: 10/23/2023

image: img/gitlab_logo.png

format: 
  html: default

filters:
   - lightbox
lightbox: auto

abstract: | 
 Par rapport à Github le déploiement de contenus html sur Gitlab sans compte associé de type *humanum* pour la recherche en sciences sociales, demande quelques manipulations supplémentaires. Les éléments qui suivent donnent la marche à suivre, sous forme de pas à pas. Ces opérations se font sans aucune ligne de codes.
---

Prérequis: 

- Créer un compte sur [Gitlab](https://gitlab.com/) 
- Avoir une version d'une IDE compatible avec [Quarto](https://quarto.org/docs/get-started/) (Rsudio, Vscode). 


## Générer sur Gitlab un projet pour déployer du contenu html

<br>

::: {layout-ncol=3}

![1. Créer un nouveau projet](img/img1.png)

![2. Créer un projet à partir d'un template](img/img2.png)

![3. Sélectionner le template html](img/img2b.png)

![4. Paramétrer et créer le projet](img/img3.png)

:::


1. En haut à droite cliquer sur **New project** 

2. Cliquer sur **Create from template**

3. Sélectionner le template **Pages/Plain HTML** en cliquant sur **use template**

4. Paramétrer et créer le projet:
   * Donner un nom au projet qui s'ajoutera au nom de domaine 
   * Vous pour modifier le nom de domaine (voir la fenêtre ouverte dans l'image)
   * Vérifier que le projet est de type **public** (visibility levels)


## Générer le template de déploiement d'une page html

<br>

::: {layout-ncol=3}

![1. Ouvrir la page **pipelines** et lancer le job](img/img4.png)

![2. Exécuter le job associé à *Pages/Plain HTML* ](img/img5.png)

![3. Déployer la page associer au template ](img/img6.png)

![4. Résumé du job](img/img7.png)

![5. Visualiser la page test (1)](img/img8.png)

![6. Visualiser la page test (2)](img/img9.png)

:::

1. Dans la liste de navigation à gauche sélectionner **Build** et cliquer sur **Pipeline**. Cliquer en haut à gauche sur le bouton **Run pipeline**

2. Cliquer de nouveau sur le bouton **Run pipeline** 

3. Cliquer sur **pages**

4. Une page résumant les opérations et indiquant que tout s'est bien déroulé s'affiche

5. Dans la liste de navigation à gauche, aller sur **Deploy** et cliquer sur **pages**
   * Vous pouvez décocher **use unique domain** pour réduire la longueur du nom de domaine 
   * Cliquer sur le lien en dessous


En retournant sur le projet (ici **tuto_assistools**) Vous avez tous les fichiers qui vous permettrons de créer un projet avec Quarto et déployer le notebook ou le site sur gitlab.  


::: callout-important

* Ne pas supprimer ou modifier le fichier **`gitlab-ci.yml** lorsque, comme moi, vous n'y comprenez strictement rien.

* Vous pouvez surpprimer le répertoire **public** ou les fichiers qu'il contient, mais je conseille de faire ceci sur le projet en local

:::

![](img/img10.png)


Vous pouver maintenant récupérer l'adresse du projet en cliquant sur le bouton **clone** pour créer votre projet de notebook ou site avec Quarto.


Vous pouver maintenant récupérer l'adresse du projet en cliquant sur le bouton **clone** pour créer votre projet de notebook ou site avec Quarto.


## Avec Quarto 

* Créer un projet en mode **VERSION CONTROL** et utiliser le lien récupéré sur gitlab (bouton clone). 

* Même pour un simple notebook (une page html) il vous faudra un fichier de métadonnées  **`_quarto.yml`**:
  - Soit on le génère à partir d'un fichier texte
  - Soit on le récupère un `_quarto.yml` existant.
* Dans le fichier `_quarto.yml`, il vous faudra changer le répertoire de destination des fichiers d'affichage du notebook ou du site, qui doit s'appeler **`public`**  
  * Par défaut Quarto génère un répertoire de destination appelé `_site`
    Pour changer le répertoir: **`output_dir: public`**.  
    
A minima pour un notebook, votre fichier `_quarto.yml` devra comporter les élèments suivants: 

```md
project:
  type: website
  output-dir: public
```

* Vous pouvez supprimer les fichiers se trouvant dans le répertoire public (page html test)
* Le nom du fichier `.qmd` du notebook ou de la page d'accueil du site doit être nommé **`index.qmd`**
* Une fois la compilation de la page ou du site effectuée on peut synchroniser le projet en local sur celui qui a été généré sur gitlab. 

::: callout-warning

## gitignore

Il est toujours bon de rappeler qu'il est fortement déconseillé de synchroniser les dépôts sans mettre une exception sur les bases de données utilisées. 
On fait cela simplement dans le fichier .gitignore, en ajoutant par exemple une exception automatique par type de fichier. Si on veut exclure les fichiers de type **csv**, on ajout au fichier .gitignore: 

```md
*.csv
```

:::


Une fois synchronisé: 

- [Le projet **tuto_assistools** sur gitlab](https://gitlab.com/marc6945542/tuto_assistools)
- [La page html déployée](https://marc6945542.gitlab.io/tuto_assistools/index.html)


  






