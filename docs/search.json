[
  {
    "objectID": "Autres/assist/posts/git_rstudio/git_rstudio.html",
    "href": "Autres/assist/posts/git_rstudio/git_rstudio.html",
    "title": "Rstudio et Git[hub/lab]: l’essentiel",
    "section": "",
    "text": "Prérequis:\n\nInstallé l’application git (https://git-scm.com/). A l’Ined elle peut être directement installée via applined\nAvoir un compte github (https://github.com/) ou gitlab (https://about.gitlab.com/)\n\nFormation Git: https://learngitbranching.js.org/?locale=fr_FR\n\n\n\n\n\n\nDébut de l’animation\n\n\n\nCliquer sur l’animation pour la faire redémarrer au début.\n\n\n\nCréation d’un dépôt Git\n\nLa méthode de clônage du dépôt montré ici utilise un lien https. Il est préférable de sécuriser les opérations de synchronisation avec une clé SSH. Elle peut être générée dans Rstudio (tools=&gt;global options=&gt;git/svn) et appliquée dans son compte git (dans github aller dans les settings de son profile puis dans “SSH and GPH keys”) [Oui…Faire un tuto là dessus].\nLe dépôt qui a été généré est de type public, on peut le créer en mode privé.\nSi on associe le dépôt à un projet Rstudio, il n’est pas utile de générer un fichier .gitignore car il sera automatiquement ajouté à la création du projet [indique les fichiers ou les types de fichiers qui ne seront pas synchronisés]\nOn récupère l’adresse du dépôt en allant sur le bouton &lt;&gt; clone\n\n\n\n\n\n\n\n\nCréation d’un projet Rstudio avec clônage du dépôt\n\n\n\n\n\n\n\nAjout d’un fichier dans le projet et l’envoyer dans le dépôt distant\nPetite remarque avec Quarto: éviter de faire un render d’un fichier .qmd qui n’est pas associé au projet actif de la session.\n\n\n\n\n\nLes opérations git effectuée sur le terminal sont a minima (git help).\n\ngit status permet, comme son nom l’indique, d’afficher les modifications apparues dans le projet depuis la dernière synchronisation. Optionnel, sans conséquence sur la synchronisation.\ngit add .: on peut sélectionner des fichiers particuliers, l’ajout de . permet de sélectionné l’ensemble des fichiers affichés avec git status.\nLe commit (commentaire) semble obligatoire dans rstudio. On peut le faire dans le terminal, mais je préfère aller dans la fenêtre commit accessible dans l’onglet git (en haut à droite de l’interface).\nUne fois le commentaire réalisé on peut envoyer les fichiers dans le dépôt en cliquant sur push ou dans le terminal exécuter git push\n\n\n\n\n\n\n\n\nEnvoyer des fichiers dans le dépôt alors qu’il a été modifié en amont\nSi le dépôt git a été modifié, par soit même ou par une personne associée au projet, on ne peut pas transférer des fichiers vers le dépôt à partir de son répertoire en local. On doit synchroniser le répertoire et le dépôt distant en faisant un pull dans l’onglet git ou dans le terminal avec git pull."
  },
  {
    "objectID": "R/assist/posts/recodage_multiple/recodage_multiple.html",
    "href": "R/assist/posts/recodage_multiple/recodage_multiple.html",
    "title": "Recodage multiple",
    "section": "",
    "text": "Il existe plusieurs solutions pour automatiser un recodage dans R, nous allons aborder certaines d’entre-elles mais cette liste est loin d’être exhaustive."
  },
  {
    "objectID": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-lensemble-des-données",
    "href": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-lensemble-des-données",
    "title": "Recodage multiple",
    "section": "Sur l’ensemble des données",
    "text": "Sur l’ensemble des données\n\nExemple 1 : Changer l’ensemble des valeurs manquantes\n\n# Je fais un copie du jeu de donnée\ndf2 &lt;- df\n# Je remplace tous les NA par la valeurs 0\ndf2[is.na(df2)] &lt;- 0\ndf2\n\n   V1 V2 V3 V4 V5 V6 V7 V8 V9 V10\n1   8  0  8  5  8  5  5  8  6   1\n2   3  4  8  9  7  7  6  6  6   9\n3   6  4  4  9  8  1  5  3  2   0\n4   0  9  4  5  6  1  7  6  5  10\n5   1  5  1  3  7  5  6  5  1  10\n6   6  9  9  3  5  5 10  0  9   9\n7  10  6  8  9  9  0  0  4 10   9\n8   1  8  0  8  6  2  3  5  9   7\n9  10  4  3  6  2  2  7  0  6   9\n10  2  4  2  5  9  7  8  8  2   4\n\n\n\n\nExemple 2 : Remplacer une valeur par une autre\n\n# Je fais une copie de l'original\ndf2 &lt;- df\n# Je remplace tous les 10 par la valeur \"DIX\"\ndf2[df2==10] &lt;- \"DIX\"\ndf2\n\n     V1 V2 V3 V4 V5 V6   V7 V8  V9  V10\n1     8 NA  8  5  8  5    5  8   6    1\n2     3  4  8  9  7  7    6  6   6    9\n3     6  4  4  9  8  1    5  3   2 &lt;NA&gt;\n4  &lt;NA&gt;  9  4  5  6  1    7  6   5  DIX\n5     1  5  1  3  7  5    6  5   1  DIX\n6     6  9  9  3  5  5  DIX NA   9    9\n7   DIX  6  8  9  9 NA &lt;NA&gt;  4 DIX    9\n8     1  8 NA  8  6  2    3  5   9    7\n9   DIX  4  3  6  2  2    7 NA   6    9\n10    2  4  2  5  9  7    8  8   2    4"
  },
  {
    "objectID": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-une-sélection-de-variables",
    "href": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-une-sélection-de-variables",
    "title": "Recodage multiple",
    "section": "Sur une sélection de variables",
    "text": "Sur une sélection de variables\nLes jeux de données peuvent être composés d’un grand nombre de variables et donc on peut-être amené à effectuer un recodage uniquement sur certaines variables.\nL’exemple ci-dessous montre comment procéder à partir d’une sélection de variable stockée dans le vecteur var.\n\nExemple 3 : Recoder une sélection de variables\n\n# Je fais une copie de l'original\ndf2 &lt;- df\n# Je choisis certaines variables sur lesquelle on appliquera le recodage\nvar &lt;- c(\"V1\",\"V7\",\"V9\")\n\n# Fonctionne aussi avec la position de la colonne\n# var &lt;- c(2,5,6)\n\n# On crée une boucle qui s'activera uniquement pour les variables contenues \n# dans var\n\nfor (i in var) {\n  df2[[i]] &lt;- ifelse(df2[[i]] == 10, \"DIX\", df2[[i]])\n}\n\n\ndf2\n\n     V1 V2 V3 V4 V5 V6   V7 V8  V9 V10\n1     8 NA  8  5  8  5    5  8   6   1\n2     3  4  8  9  7  7    6  6   6   9\n3     6  4  4  9  8  1    5  3   2  NA\n4  &lt;NA&gt;  9  4  5  6  1    7  6   5  10\n5     1  5  1  3  7  5    6  5   1  10\n6     6  9  9  3  5  5  DIX NA   9   9\n7   DIX  6  8  9  9 NA &lt;NA&gt;  4 DIX   9\n8     1  8 NA  8  6  2    3  5   9   7\n9   DIX  4  3  6  2  2    7 NA   6   9\n10    2  4  2  5  9  7    8  8   2   4\n\n\nSeulement les variables V1, V7 et V9 ont été recodées. On remarque que des valeurs 10 sont présentes dans la variable V10."
  },
  {
    "objectID": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-lensemble-des-données-1",
    "href": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-lensemble-des-données-1",
    "title": "Recodage multiple",
    "section": "Sur l’ensemble des données",
    "text": "Sur l’ensemble des données\nLa fonction mutate_all permet de recoder l’ensemble des variables du jeu de données.\n\nExemple 4 : mutate_all\nOn remplace l’ensemble de 7 par la valeur “SEPT”\n\nlibrary(dplyr)\n\ndf2 &lt;- df %&gt;% \n  mutate_all(~ifelse(. == 7, \"SEPT\", .))\ndf2\n\n   V1 V2 V3 V4   V5   V6   V7 V8 V9  V10\n1   8 NA  8  5    8    5    5  8  6    1\n2   3  4  8  9 SEPT SEPT    6  6  6    9\n3   6  4  4  9    8    1    5  3  2 &lt;NA&gt;\n4  NA  9  4  5    6    1 SEPT  6  5   10\n5   1  5  1  3 SEPT    5    6  5  1   10\n6   6  9  9  3    5    5   10 NA  9    9\n7  10  6  8  9    9 &lt;NA&gt; &lt;NA&gt;  4 10    9\n8   1  8 NA  8    6    2    3  5  9 SEPT\n9  10  4  3  6    2    2 SEPT NA  6    9\n10  2  4  2  5    9 SEPT    8  8  2    4\n\n\n\nLe signe ~ est obligatoire, et permet d’indiquer qu’on applique la formule qui le suit à l’ensemble du jeu de données.\nLes . sont une spécificité de la syntaxe sous forme de pipes (%&gt;%). Ils sont synonymes de la base de données en entrée (df) mais permet de tenir compte de toutes les transformations des pipes précédentes faites sur cette base."
  },
  {
    "objectID": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-une-sélection-de-variables-1",
    "href": "R/assist/posts/recodage_multiple/recodage_multiple.html#sur-une-sélection-de-variables-1",
    "title": "Recodage multiple",
    "section": "Sur une sélection de variables",
    "text": "Sur une sélection de variables\nLes fonctions mutate_if et mutate_at permettent d’appliquer un recodage mais uniquement sur des variables choisies par une ou plusieurs conditions.\n\nExemple 5 : mutate_if\nDans cet exemple, on va appliquer un recodage uniquement aux variables numériques. Pour l’exemple, on commence par créer une variable catégorielle var_categ, sur laquelle le recodage ne s’appliquera pas.\n\ndf2 &lt;- df %&gt;% \n  mutate(var_categ = rep(c(\"bonjour\", \"5\"), 5)) %&gt;% \n  select(var_categ, everything())\ndf2\n\n   var_categ V1 V2 V3 V4 V5 V6 V7 V8 V9 V10\n1    bonjour  8 NA  8  5  8  5  5  8  6   1\n2          5  3  4  8  9  7  7  6  6  6   9\n3    bonjour  6  4  4  9  8  1  5  3  2  NA\n4          5 NA  9  4  5  6  1  7  6  5  10\n5    bonjour  1  5  1  3  7  5  6  5  1  10\n6          5  6  9  9  3  5  5 10 NA  9   9\n7    bonjour 10  6  8  9  9 NA NA  4 10   9\n8          5  1  8 NA  8  6  2  3  5  9   7\n9    bonjour 10  4  3  6  2  2  7 NA  6   9\n10         5  2  4  2  5  9  7  8  8  2   4\n\n\nOn utilise mutate_if, pour changer la valeur 5 en CINQ, uniquement pour les variables numériques.\n\ndf2 &lt;- df2 %&gt;% \n  mutate_if(is.numeric, ~ifelse(. == 5, \"CINQ\", .))\ndf2\n\n   var_categ V1   V2 V3   V4   V5   V6   V7   V8   V9 V10\n1    bonjour  8 &lt;NA&gt;  8 CINQ    8 CINQ CINQ    8    6   1\n2          5  3    4  8    9    7    7    6    6    6   9\n3    bonjour  6    4  4    9    8    1 CINQ    3    2  NA\n4          5 NA    9  4 CINQ    6    1    7    6 CINQ  10\n5    bonjour  1 CINQ  1    3    7 CINQ    6 CINQ    1  10\n6          5  6    9  9    3 CINQ CINQ   10 &lt;NA&gt;    9   9\n7    bonjour 10    6  8    9    9 &lt;NA&gt; &lt;NA&gt;    4   10   9\n8          5  1    8 NA    8    6    2    3 CINQ    9   7\n9    bonjour 10    4  3    6    2    2    7 &lt;NA&gt;    6   9\n10         5  2    4  2 CINQ    9    7    8    8    2   4\n\n\n\n\nExemple 6 : mutate_at\nla fonction mutate_at permet d’appliquer un recodage à un ensemble de variables définies par leur nom.\nIci, on applique le recodage uniquement aux variables qui continennent la chaîne de caractéres V1 dans leur nom de variables, on recode donc V1 et V10.\n\n# Sélection des variables\nvar &lt;- grep(\"1\", names(df), value=TRUE)\nvar\n\n[1] \"V1\"  \"V10\"\n\n# On recode les NA en VAL.MANQ pour les variables de var\ndf2 &lt;- df %&gt;% \n  mutate_at(var, ~ ifelse(is.na(.) == TRUE, \"VAL.MANQ\", .))\ndf2\n\n         V1 V2 V3 V4 V5 V6 V7 V8 V9      V10\n1         8 NA  8  5  8  5  5  8  6        1\n2         3  4  8  9  7  7  6  6  6        9\n3         6  4  4  9  8  1  5  3  2 VAL.MANQ\n4  VAL.MANQ  9  4  5  6  1  7  6  5       10\n5         1  5  1  3  7  5  6  5  1       10\n6         6  9  9  3  5  5 10 NA  9        9\n7        10  6  8  9  9 NA NA  4 10        9\n8         1  8 NA  8  6  2  3  5  9        7\n9        10  4  3  6  2  2  7 NA  6        9\n10        2  4  2  5  9  7  8  8  2        4"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html",
    "href": "R/assist/posts/weight_norm/weight_norm.html",
    "title": "Pondérations normalisées avec R",
    "section": "",
    "text": "Fonctions utilisées dans la fiche\n\n\nPackage\nFonction\n\n\n\n\nquestionr\nwtd.table - cprop - lprop\n\n\nsurvey\nsvydesign - svytable - svymean - svyglm\n\n\nBase R\nmean\nDocumentation sur les packages:\nActivation des packages et ouverture de la table d’exemple HDV\n#install.packages(questionr)\n#install.packages(survey)\n\nlibrary(questionr)\nlibrary(survey)\n\n#Utilisation de la table d'exemple Histoire de vie (hdv2003) \ndata(\"hdv2003\")\n\n# Extrait du fichier\nhdv2003[1:5,1:5]\n\n  id age  sexe                                              nivetud    poids\n1  1  28 Femme Enseignement superieur y compris technique superieur 2634.398\n2  2  23 Femme                                                 &lt;NA&gt; 9738.396\n3  3  59 Homme                    Derniere annee d'etudes primaires 3994.102\n4  4  34 Homme Enseignement superieur y compris technique superieur 5731.662\n5  5  71 Femme                    Derniere annee d'etudes primaires 4329.094\nLa variable pondérée du fichier s’appelle poids"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#fréquences-pondérées",
    "href": "R/assist/posts/weight_norm/weight_norm.html#fréquences-pondérées",
    "title": "Pondérations normalisées avec R",
    "section": "Fréquences pondérées",
    "text": "Fréquences pondérées\n\nFonction wtd.table()\n\n\n\n\nfréquences sans pondération\n\ntable(hdv2003$sexe)\n\n\n\nHomme Femme \n  899  1101 \n\n\n\n\n\nfréquences avec pondérations\n\n# tris à plat avec l'option weights\nwtd.table(hdv2003$sexe, weights = hdv2003$poids)\n\n\n  Homme   Femme \n5149382 5921844 \n\n#  tris croisé\nwtd.table(hdv2003$qualif,hdv2003$sexe,weights=hdv2003$poids)\n\n                             Homme     Femme\nOuvrier specialise        532365.8  479015.0\nOuvrier qualifie         1163988.6  296252.0\nTechnicien                378956.7  115658.0\nProfession intermediaire  438737.8  375560.7\nCadre                     779354.9  623574.6\nEmploye                   525068.8 2591911.0\nAutre                     129695.9  145912.6\n\n\nPour normaliser la pondération on ajoute l’option normwt=TRUE.\n\n\n\nfréquences avec pondérations normalisées\n\nwtd.table(hdv2003$qualif,hdv2003$sexe,weights=hdv2003$poids, normwt=TRUE)\n\n\n                             Homme     Femme\nOuvrier specialise        96.17106  86.53332\nOuvrier qualifie         210.27275  53.51747\nTechnicien                68.45794  20.89344\nProfession intermediaire  79.25731  67.84446\nCadre                    140.78927 112.64780\nEmploye                   94.85286 468.22473\nAutre                     23.42937  26.35888"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#pourcentages-pondérés",
    "href": "R/assist/posts/weight_norm/weight_norm.html#pourcentages-pondérés",
    "title": "Pondérations normalisées avec R",
    "section": "Pourcentages pondérés",
    "text": "Pourcentages pondérés\n\n\n\nStocker le resultat des fréquences pondérées dans un objet, ici res\n\nres=wtd.table(hdv2003$qualif,hdv2003$sexe, weights=hdv2003$poids, normwt=TRUE)\n\n\n\nOn utilise les fonctions cprop() et lprop:\n\ncprop(): pourcentages colonnes\nlprop(): pourcentages lignes\n\n\n\ncprop(res) \n\n                         Homme Femme Ensemble\nOuvrier specialise        13.5  10.4  11.8   \nOuvrier qualifie          29.5   6.4  17.0   \nTechnicien                 9.6   2.5   5.8   \nProfession intermediaire  11.1   8.1   9.5   \nCadre                     19.7  13.5  16.4   \nEmploye                   13.3  56.0  36.3   \nAutre                      3.3   3.2   3.2   \nTotal                    100.0 100.0 100.0   \n\nlprop(res) \n\n                         Homme Femme Total\nOuvrier specialise        52.6  47.4 100.0\nOuvrier qualifie          79.7  20.3 100.0\nTechnicien                76.6  23.4 100.0\nProfession intermediaire  53.9  46.1 100.0\nCadre                     55.6  44.4 100.0\nEmploye                   16.8  83.2 100.0\nAutre                     47.1  52.9 100.0\nEnsemble                  46.0  54.0 100.0"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#moyenne-pondérée",
    "href": "R/assist/posts/weight_norm/weight_norm.html#moyenne-pondérée",
    "title": "Pondérations normalisées avec R",
    "section": "Moyenne pondérée",
    "text": "Moyenne pondérée\n\nFonction wtd.mean\n\n\n\n\nAge moyen pondéré\n\nwtd.mean(hdv2003$age, weights = hdv2003$poids)\n\n\n[1] 46.34726"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#création-de-la-variable-de-pondération-normalisée",
    "href": "R/assist/posts/weight_norm/weight_norm.html#création-de-la-variable-de-pondération-normalisée",
    "title": "Pondérations normalisées avec R",
    "section": "Création de la variable de pondération normalisée",
    "text": "Création de la variable de pondération normalisée\nOn divise tout simplement chaque poids individuel par la moyenne des poids (fonction mean())\n\n\n\ncreation d'une variable de pondération normalisée\n\nhdv2003$poids_norm=hdv2003$poids/mean(hdv2003$poids)\n\n\nComme la normalisation se fait sur la taille de l’échantillon, la somme des poids normalisés est bien égale à l’effectif de celui-ci\n\nsum(hdv2003$poids_norm)\n\n[1] 2000"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#design-de-léchantillon",
    "href": "R/assist/posts/weight_norm/weight_norm.html#design-de-léchantillon",
    "title": "Pondérations normalisées avec R",
    "section": "Design de l’échantillon",
    "text": "Design de l’échantillon\n\nOn est ici dans la situation la plus simple simple, le design se réduisant à l’application d’un poids d’échantillonage.\nAvant d’utiliser la fonction d’analyse on générère un objet renseignant les divers éléments entrant dans le design de l’enquête (ici seulement la variable hdv2003$poids_norm) avec la fonction svydesign\n\n\n\n\nFonction svydesign\n\ndfw &lt;- svydesign(ids = ~1, data = hdv2003, weights = ~ hdv2003$poids)"
  },
  {
    "objectID": "R/assist/posts/weight_norm/weight_norm.html#application-du-design-à-des-fonctions-analytiques",
    "href": "R/assist/posts/weight_norm/weight_norm.html#application-du-design-à-des-fonctions-analytiques",
    "title": "Pondérations normalisées avec R",
    "section": "Application du design à des fonctions analytiques",
    "text": "Application du design à des fonctions analytiques\n\nOn ajoute aux fonctions l’objet généré avec svydesign (ici dfw)\n\nTableaux de fréquence\n\nFonction svytable\n\n\n\n\nfréquences pondérées\n\nsvytable(~sexe, dfw)\n\n\nsexe\n  Homme   Femme \n5149382 5921844 \n\nsvytable(~ sexe + qualif, dfw)\n\n       qualif\nsexe    Ouvrier specialise Ouvrier qualifie Technicien Profession intermediaire\n  Homme           532365.8        1163988.6   378956.7                 438737.8\n  Femme           479015.0         296252.0   115658.0                 375560.7\n       qualif\nsexe        Cadre   Employe     Autre\n  Homme  779354.9  525068.8  129695.9\n  Femme  623574.6 2591911.0  145912.6\n\n\n\n\n\nPourcentages pondérés\n\ntab &lt;- svytable(~ sexe + qualif, dfw)\n\n\n\n\n\nPourcentages pondérés\n\nlprop(tab)  # % ligne pondérée\n\n\n          qualif\nsexe       Ouvrier specialise Ouvrier qualifie Technicien\n  Homme     13.5               29.5              9.6     \n  Femme     10.4                6.4              2.5     \n  Ensemble  11.8               17.0              5.8     \n          qualif\nsexe       Profession intermediaire Cadre Employe Autre Total\n  Homme     11.1                     19.7  13.3     3.3 100.0\n  Femme      8.1                     13.5  56.0     3.2 100.0\n  Ensemble   9.5                     16.4  36.3     3.2 100.0\n\ncprop(tab)  # % colonne pondérée\n\n       qualif\nsexe    Ouvrier specialise Ouvrier qualifie Technicien Profession intermediaire\n  Homme  52.6               79.7             76.6       53.9                   \n  Femme  47.4               20.3             23.4       46.1                   \n  Total 100.0              100.0            100.0      100.0                   \n       qualif\nsexe    Cadre Employe Autre Ensemble\n  Homme  55.6  16.8    47.1  46.0   \n  Femme  44.4  83.2    52.9  54.0   \n  Total 100.0 100.0   100.0 100.0   \n\n\nMoyenne pondérée\n\nFonction svymean et svyby\n\n\n\n\nMoyenne pondérée\n\nsvymean(~age, dfw)\n\n\n      mean     SE\nage 46.347 0.5284\n\n\n\nSi on souhaite calculer une moyenne par sous groupe, on utilise la fonction svyby à laquelle on ajoute l’argument svymean en option\n\n\n\n\nMoyennes pondérées par groupe\n\nsvyby(~age, ~sexe, dfw, svymean)\n\n\n       sexe      age        se\nHomme Homme 45.20200 0.7419450\nFemme Femme 47.34313 0.7420836\n\n\n\nModèle logistique avec svyglm\n\n\n\n\nMoyennes pondérées par groupe\n\noptions(show.signif.stars=FALSE)\nsummary(svyglm(cuisine ~ age + sexe + occup + qualif, dfw, family=binomial))\n\n\nWarning in eval(family$initialize): nombre de succès non entier dans un glm\nbinomial !\n\n\n\nCall:\nsvyglm(formula = cuisine ~ age + sexe + occup + qualif, design = dfw, \n    family = binomial)\n\nSurvey design:\nsvydesign(ids = ~1, data = hdv2003, weights = ~hdv2003$poids)\n\nCoefficients:\n                                Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)                    -0.151065   0.324985  -0.465    0.642\nage                            -0.012303   0.006407  -1.920    0.055\nsexeFemme                       0.922651   0.160463   5.750 1.06e-08\noccupChomeur                    0.344982   0.255175   1.352    0.177\noccupEtudiant, eleve           -0.677345   1.124417  -0.602    0.547\noccupRetraite                  -0.256705   0.242383  -1.059    0.290\noccupRetire des affaires        0.633727   1.100048   0.576    0.565\noccupAu foyer                   0.249697   0.286245   0.872    0.383\noccupAutre inactif             -0.231741   0.382382  -0.606    0.545\nqualifOuvrier qualifie          0.134447   0.252713   0.532    0.595\nqualifTechnicien               -0.395892   0.357399  -1.108    0.268\nqualifProfession intermediaire  0.220994   0.293482   0.753    0.452\nqualifCadre                    -0.265439   0.256451  -1.035    0.301\nqualifEmploye                   0.018206   0.222582   0.082    0.935\nqualifAutre                    -0.510097   0.401470  -1.271    0.204\n\n(Dispersion parameter for binomial family taken to be 0.9331289)\n\nNumber of Fisher Scoring iterations: 4\n\n\nVous pouvez retrouver dans la documentation l’ensemble des fonctions prises en charge."
  }
]