[
  {
    "objectID": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-lm",
    "href": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-lm",
    "title": "Afficher des outputs de régression avec Jtools",
    "section": "Avec la fonction lm()",
    "text": "Avec la fonction lm()\nListe des options\n\nlibrary(jtools)\nlibrary(readr)\n\ndf =  read.csv(\"https://raw.githubusercontent.com/mthevenin/intro_logit/main/hypertension2.csv\")\n\nfit = lm(bpsystol ~ age + I(sex) + I(black) + I(region), data=df)\n\n1summ(fit, digits=4)\n\n\n1\n\ndigits=4 =&gt; Les résultats sont reportés avec 4 décimales\n\n\n\n\nMODEL INFO:\nObservations: 10351\nDependent Variable: bpsystol\nType: OLS linear regression \n\nMODEL FIT:\nF(6,10344) = 552.2494, p = 0.0000\nR² = 0.2426\nAdj. R² = 0.2422 \n\nStandard errors: OLS\n---------------------------------------------------------------\n                              Est.     S.E.     t val.        p\n----------------------- ---------- -------- ---------- --------\n(Intercept)               102.2001   0.8979   113.8168   0.0000\nage                         0.6563   0.0116    56.5104   0.0000\nI(sex)Male                  4.0350   0.3999    10.0911   0.0000\nI(black)Not Black          -4.6494   0.6640    -7.0019   0.0000\nI(region)NE                 0.2570   0.5892     0.4362   0.6627\nI(region)S                 -0.7920   0.5450    -1.4532   0.1462\nI(region)W                 -0.5221   0.5543    -0.9420   0.3462\n---------------------------------------------------------------"
  },
  {
    "objectID": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-glm-lien-logit",
    "href": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-glm-lien-logit",
    "title": "Afficher des outputs de régression avec Jtools",
    "section": "Avec la fonction glm() [lien logit]",
    "text": "Avec la fonction glm() [lien logit]\nListe des options\n\nfit = glm(highbp ~ age + I(sex) + I(black) + I(region), family=binomial, data=df)   \n\n1summ(fit, digits=4, confint=TRUE, exp=TRUE)\n\n\n1\n\nOn ajoute des intervalles de confiance (confint=TRUE) et le report des estimateurs sous forme d’Odds Ratio (exp=TRUE)\n\n\n\n\nMODEL INFO:\nObservations: 10351\nDependent Variable: highbp\nType: Generalized linear model\n  Family: binomial \n  Link function: logit \n\nMODEL FIT:\nχ²(6) = 1623.1601, p = 0.0000\nPseudo-R² (Cragg-Uhler) = 0.1951\nPseudo-R² (McFadden) = 0.1151\nAIC = 12492.3709, BIC = 12543.0848 \n\nStandard errors: MLE\n-------------------------------------------------------------------------\n                          exp(Est.)     2.5%    97.5%     z val.        p\n----------------------- ----------- -------- -------- ---------- --------\n(Intercept)                  0.0853   0.0701   0.1038   -24.5720   0.0000\nage                          1.0496   1.0469   1.0524    36.1832   0.0000\nI(sex)Male                   1.5483   1.4223   1.6856    10.0890   0.0000\nI(black)Not Black            0.5860   0.5092   0.6742    -7.4663   0.0000\nI(region)NE                  1.1655   1.0287   1.3203     2.4051   0.0162\nI(region)S                   1.0024   0.8930   1.1253     0.0414   0.9669\nI(region)W                   1.0966   0.9746   1.2338     1.5322   0.1255\n-------------------------------------------------------------------------"
  },
  {
    "objectID": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-svyglm-lien-logit",
    "href": "R/assist/posts/jtools_output/jtools_output.html#avec-la-fonction-svyglm-lien-logit",
    "title": "Afficher des outputs de régression avec Jtools",
    "section": "Avec la fonction svyglm() [lien logit]",
    "text": "Avec la fonction svyglm() [lien logit]\nListe des options\n\nlibrary(survey)\n\nw = svydesign(id=~1, weights=~w, data=df)\n\nfit = svyglm(highbp ~ age + I(sex) + I(black) + I(region), family=binomial, design=w)\nsumm(fit, digits=4, confint=TRUE, exp=TRUE)    \n\nMODEL INFO:\nObservations: 10351\nDependent Variable: highbp\nType: Analysis of complex survey design \n Family: binomial \n Link function: logit \n\nMODEL FIT:\nPseudo-R² (Cragg-Uhler) = 0.1881\nPseudo-R² (McFadden) = 0.1125\nAIC = 12064.1922 \n\n-------------------------------------------------------------------------\n                          exp(Est.)     2.5%    97.5%     t val.        p\n----------------------- ----------- -------- -------- ---------- --------\n(Intercept)                  0.0692   0.0553   0.0865   -23.3763   0.0000\nage                          1.0530   1.0497   1.0562    33.0767   0.0000\nI(sex)Male                   1.8298   1.6529   2.0256    11.6459   0.0000\nI(black)Not Black            0.5849   0.4913   0.6964    -6.0259   0.0000\nI(region)NE                  1.1822   1.0245   1.3642     2.2906   0.0220\nI(region)S                   0.9961   0.8670   1.1445    -0.0549   0.9562\nI(region)W                   1.1225   0.9737   1.2940     1.5928   0.1112\n-------------------------------------------------------------------------\n\nEstimated dispersion parameter = 0.984"
  },
  {
    "objectID": "R/assist/posts/jtools_output/jtools_output.html#footnotes",
    "href": "R/assist/posts/jtools_output/jtools_output.html#footnotes",
    "title": "Afficher des outputs de régression avec Jtools",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nmesure de la tension artérielle (lm) et du risque d’hypertension (glm et svyglm)↩︎"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Pro/Cons :",
    "text": "Pro/Cons :\nAvantage :\n- Pas besoin de packages supplémentaires\nInconvénient :\n\nLent\nProblème de persistence des types de modalités (surtout avec les labels et les factors)1\n\n\nCode moins lisible\nGestion des conditions multiples illisibles"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-1-variables-dichotomiques",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-1-variables-dichotomiques",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Exemple 1 : Variables dichotomiques",
    "text": "Exemple 1 : Variables dichotomiques\nCréation d’une variable catégorielle taille_rec, avec deux modalités : “Grand.e”, “Petit.e”.\n\n\n\n\n\n\n# Sélection d'une seed pour obtenir le même échantillon \n# dans la création des données fictive aléatoires\nset.seed(1)\n\n# Création du jeu de données exemple\nindividus &lt;- data.frame(\n  id = 1:20,\n  # Âges aléatoires entre 18 et 65 ans\n  age = sample(18:65, 20, replace = TRUE), \n  # Tailles aléatoires entre 150 et 200 cm\n  taille = sample(150:200, 20, replace = TRUE), \n  # Sexe aléatoire (Homme ou Femme)\n  sexe = sample(c(\"Homme\", \"Femme\"), 20, replace = TRUE) \n)\n\n\n# Ajout d'une variable taill_rec pour illustrer l'utilisation de ifelse()\nindividus$taille_rec &lt;- ifelse(individus$taille &gt; 175, # Condition \n                               \"Grand.e\",              # Catégorie si VRAI \n                               \"Petit.e\")              # Catégorie si FAUX\n\n\n# Affichage de la nouvelle variable\ntable(individus$taille_rec)\n\n\nGrand.e Petit.e \n     12       8"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-2-variables-avec-plus-de-2-modalités",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-2-variables-avec-plus-de-2-modalités",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Exemple 2 : Variables avec plus de 2 modalités",
    "text": "Exemple 2 : Variables avec plus de 2 modalités\nIl est possible d’empiler les fonctions ifelse() pour créer des variables avec plus de deux modalités. Pour cela on suit le schéma suivant :\n\n\n\n\n\nDans cet exemple, on divise la taille en 3 catégories :\n\nPetit.e : &lt; 165\n\nMoyen.ne : De 165 à 185\n\nGrand.e : &gt; 185\n\n\nindividus$taille_rec2 &lt;- ifelse(individus$taille &gt; 185,      # Condition 1\n                               \"Grand.e\",                    # Condi 1 Vrai \n                               ifelse(individus$taille &lt; 165,# Condition 2\n                                      \"Petit.e\",             # Condi 2 Vrai\n                                      \"Moyen.ne\"))           # Condi 1&2 Fausse\n                               \n\n\n# Affichage de la nouvelle variable\ntable(individus$taille_rec2)\n\n\n Grand.e Moyen.ne  Petit.e \n       8        9        3"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-3-conditions-issues-de-deux-variables-initiales",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-3-conditions-issues-de-deux-variables-initiales",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Exemple 3 : Conditions issues de deux variables initiales",
    "text": "Exemple 3 : Conditions issues de deux variables initiales\nIl est également possible de créer des variables à partir de conditions provenant de plusieurs variables.\nDans cet exemple, nous allons créer une variable dont les catégories seront différentes selon pour les hommes et les femmes :\n\n\n\nPour les hommes :\n\nPetit.e : &lt; 180\n\nGrand.e : &gt;= 180\n\nPour les femmes :\n\nPetit.e : &lt; 170\n\nGrand.e : &gt;= 170\n\n\n\n\n\n\n\n\n\n\n\nindividus$taille_rec3 &lt;- ifelse(individus$sexe == \"Homme\" & \n                                  individus$taille &lt; 180,      # Condition 1\n                                # Condition 1 Vraie :\n                                \"Petit.e\",    \n                                # Sinon :\n                                ifelse(individus$sexe == \"Femme\" & \n                                  individus$taille &lt; 170,      # Condition 2\n                                  # Condition 2 Vraie :\n                                  \"Petit.e\",  \n                                  # Tous les autres :\n                                  \"Grand.e\"))          \n                               \n\n\n# Affichage de la nouvelle variable\ntable(individus$taille_rec3)\n\n\nGrand.e Petit.e \n     14       6"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons-1",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons-1",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Pro/Cons :",
    "text": "Pro/Cons :\nAvantage :\nLe package dplyr, présent dans le tidyverse, propose sa propre version de la fonction ifelse(), qui permet d’éviter certains problèmes rencontrer avec la version de base.\nAinsi, if_else() s’utilise exactement de la même manière que ifelse, elle est plus rapide et permet de conserver le type de la variable initiale.\nInconvénient :\n\nBesoin d’installer un package\nGestion des conditions multiples toujours illisibles"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-4-if_else",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#exemple-4-if_else",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Exemple 4 : if_else()",
    "text": "Exemple 4 : if_else()\n\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n\nindividus$taille_rec4 &lt;- if_else(individus$sexe == \"Homme\" & \n                                  individus$taille &lt; 180,      # Condition 1\n                                # Condition 1 Vraie :\n                                \"Petit.e\",    \n                                # Sinon :\n                                if_else(individus$sexe == \"Femme\" & \n                                  individus$taille &lt; 170,      # Condition 2\n                                  # Condition 2 Vraie :\n                                  \"Petit.e\",  \n                                  # Tous les autres :\n                                  \"Grand.e\"))          \n                               \n\n\n# Affichage de la nouvelle variable\ntable(individus$taille_rec4)\n\n\nGrand.e Petit.e \n     14       6 \n\n\nOn obtient bien le même résultat"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons-2",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#procons-2",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Pro/Cons :",
    "text": "Pro/Cons :\nLa gestion des conditions multiples pouvant être fastidieuse avec les fonctions ifelse(), le code devenant rapidemment illisible, dplyr propose la fonction case_when() qui permet de l’organiser mieux.\nSon fonctionnement se base sur des formules, il peut alors sembler plus ou moins compréhensibles selon les sensibilités de programmations."
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#ordre-daffectation-des-valeurs",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#ordre-daffectation-des-valeurs",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Ordre d’affectation des valeurs",
    "text": "Ordre d’affectation des valeurs\nAvec ifelse() ou avec case_when, une fois la première condition remplie, la nouvelle valeur ne peux plus être modifiée, ainsi si une condition future se superpose, elle ne sera pas prise en compte dans le recodage. On va du plus spécifique au plus général\nExemple : On crée une variable taille avec comme modalité :\n\nPetit : &lt; 170\n\nMoyen : 170 à 185\n\nGrand : &gt; 185\n\n\nindividus &lt;- individus %&gt;%\n  select(id, taille) %&gt;% \n  \n  mutate(\n    # avec ifelse\n    var1 = ifelse(taille &gt; 170, \"Moyen\", \n                  ifelse(taille &gt; 185, \"Grand\", \"Petit\")),\n    \n    # avec if_else\n    var2 = if_else(taille &gt; 170, \"Moyen\", \n                   if_else(taille &gt; 185, \"Grand\", \"Petit\")),\n    \n    # avec case_when\n    var3 = case_when(\n      taille &gt; 170 ~ \"Moyen\",\n      taille &gt; 185 ~ \"Grand\", \n      TRUE ~ \"Petit\")) \n\ntable(individus$var1)\n\n\nMoyen Petit \n   14     6 \n\ntable(individus$var2)\n\n\nMoyen Petit \n   14     6 \n\ntable(individus$var3)\n\n\nMoyen Petit \n   14     6 \n\n\nOn voit qu’il n’y a pas la catégorie “Grand”, comme la valeur a déjà été affectée à la catégorie “Moyen”. Il faudrait alors :\n\nindividus &lt;- individus %&gt;%\n  mutate(var5 = case_when(\n    taille &gt; 185 ~ \"Grand\", \n    taille &gt; 170 ~ \"Moyen\",\n    TRUE ~ \"Petit\")) \n\ntable(individus$var5)\n\n\nGrand Moyen Petit \n    8     6     6"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#a-propos-des-valeurs-manquantes",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#a-propos-des-valeurs-manquantes",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "A propos des valeurs manquantes",
    "text": "A propos des valeurs manquantes\nLes fonctions ifelse() n’ont pas le même comportement pour le traitement des valeurs manquantes que la fonction case_when.\nDans le cas des fonctions ifelse, si l’une des variables de conditions est un NA, le résultat sera également une valeur manquante dans la variable crée.\nDans le cas de la fonction case_when, l’individu avec une valeur manquante aura comme nouvelle valeur la catégorie défini dans la partie “SINON”.2\nExemple :\nOn crée un data frame avec des NA :\n\nlibrary(dplyr)\ndf &lt;- data.frame(a = c(1:3, NA, 4,NA,6:7), b = c(NA, letters[1:7]))\ndf\n\n   a    b\n1  1 &lt;NA&gt;\n2  2    a\n3  3    b\n4 NA    c\n5  4    d\n6 NA    e\n7  6    f\n8  7    g\n\n\nOn fait un recodage avec ifelse()\n\ndf %&gt;%\n  mutate(res = if_else(a &gt; 3, \"Yes\", \n                   if_else(b == \"c\", \"No\", \n                           if_else(a &gt; 5, \"Maybe\", \"Done\"))))\n\n   a    b  res\n1  1 &lt;NA&gt; &lt;NA&gt;\n2  2    a Done\n3  3    b Done\n4 NA    c &lt;NA&gt;\n5  4    d  Yes\n6 NA    e &lt;NA&gt;\n7  6    f  Yes\n8  7    g  Yes\n\n\nLes NA restent des NAs, alors qu’avec case_when :\n\ndf %&gt;%\n   mutate(res = case_when(a &gt; 3 ~ \"Yes\", \n                          b == \"c\"~\"No\", \n                          a &gt; 5 ~ \"Maybe\", \n                          TRUE ~ \"Done\"))\n\n   a    b  res\n1  1 &lt;NA&gt; Done\n2  2    a Done\n3  3    b Done\n4 NA    c   No\n5  4    d  Yes\n6 NA    e Done\n7  6    f  Yes\n8  7    g  Yes\n\n\nOn a pas de NA, ils ont été recodé avec la catégorie SINON.\nIl faut donc créer une condition avec is.na(variable)\n\ndf %&gt;%\n   mutate(res = case_when(a &gt; 3 ~ \"Yes\", \n                          b == \"c\"~\"No\", \n                          a &gt; 5 ~ \"Maybe\", \n                          is.na(a) | is.na(b) ~ NA,\n                          TRUE ~ \"Done\"))\n\n   a    b  res\n1  1 &lt;NA&gt; &lt;NA&gt;\n2  2    a Done\n3  3    b Done\n4 NA    c   No\n5  4    d  Yes\n6 NA    e &lt;NA&gt;\n7  6    f  Yes\n8  7    g  Yes"
  },
  {
    "objectID": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#footnotes",
    "href": "R/assist/posts/ifelse_casewhen/ifelse_casewhen.html#footnotes",
    "title": "Recoder des variables avec ifelse() ou case_when()",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nhttps://community.rstudio.com/t/case-when-why-not/2685/3↩︎\nhttps://stackoverflow.com/questions/57807976/how-to-use-case-when-rather-then-if-else-error-in-my-code↩︎"
  },
  {
    "objectID": "R/assist/posts/fuzzyjoin/fuzzyjoin.html",
    "href": "R/assist/posts/fuzzyjoin/fuzzyjoin.html",
    "title": "Techniques appariements entre chaînes de caractères",
    "section": "",
    "text": "En démographie historique, on est souvent amenés à confronter des chaines de caractères pour relier des enregistrements nominatifs, par exemple chaîner des actes BMS (Baptême-Mariage-Sépulture) pour essayer de retrouver le parcours d’un individu. Dans les actes du 18ème siècle, l’identification des individus, lieux ou professions est souvent rédigée avec une forte hétérogénéité. Il en résulte une jointure par recherche floue, avec des chaînes de caractères identifiantes qui correspondent à une problématique de recherche approximative.\nPour ce faire, on va calculer une distance entre 2 chaînes de caractères, qui pourra être un nombre absolu représentant un degré de ressemblance des deux chaînes comparées, ou un nombre relatif, score variant de 0 à 1 par exemple, distance définie pour mesurer cette proximité.\nUn des algorithmes les plus utilisés est l’algorithme de Lehvenshtein, qui calcule entre deux chaines de caractères la plus courte distance, en tenant compte des opérations suivantes:\n\nInsertion de motifs.\nSuppression de motifs (équivalent à la règle précédente).\nSubstitution de motifs.\n\nLes packages utilisés seront les suivants:\n\ntidyverse\nstringdist\nfuzzyjoin\n\n\n#install.packages(stringdist)\n#install.packages(tidyverse)\n#install.packages(fuzzyjoin)\n\nlibrary(stringdist)\nlibrary(tidyverse)\nlibrary(fuzzyjoin)"
  },
  {
    "objectID": "R/assist/posts/fuzzyjoin/fuzzyjoin.html#utilisation-dans-le-cas-dappariements-de-fichiers",
    "href": "R/assist/posts/fuzzyjoin/fuzzyjoin.html#utilisation-dans-le-cas-dappariements-de-fichiers",
    "title": "Techniques appariements entre chaînes de caractères",
    "section": "Utilisation dans le cas d’appariements de fichiers",
    "text": "Utilisation dans le cas d’appariements de fichiers\nNous disposons de deux fichiers d’analyse, un fichier de dénombrement recensant toutes les identités (nom-prenom) des individus présents dans un village en 1702 (nommé REC.Vars), et un fichier des baptêmes comptabilisés en 1703, contenant le nom et le prénom du père du nouveau né. On aimerait identifier les parents qui ont été recensés dans le village en 1702.\nLa fonction stringdist_join, du package fuzzyjoin, permet de faire une jointure avec une incertitude sur la clé de jonction des fichiers.\nCi-dessous le début du fichier des Baptêmes\n# Affichage début de fichier\nkable(head(BAP.Vars,n=10)) %&gt;%\n   kable_styling(bootstrap_options = c(\"striped\"),full_width = T,font_size = 11) %&gt;%\n   scroll_box(height = \"300px\")\n\n\n\n\n\nPERE.Nom\nPERE.Prenom\nNobs.BAP\n\n\n\n\nANTOINE\nJEAN\n10\n\n\nALENE\nJEAN\n12\n\n\nAUBER\nCHALLE\n16\n\n\nABEILLE\nBARTHELLEMY\n27\n\n\nANTOINE\nTHOMAS\n29\n\n\nAUDIFRETTE\nPIERRE\n36\n\n\nAUDON\nJEAN\n40\n\n\nARNAUD\nFRANCOIS\n42\n\n\nARNAUD\nCLAUDE\n48\n\n\nANGLESY\nANDRE\n67\n\n\n\n\n\n\n\nCi-dessous le début du fichier de recensement\n# Affichage début de fichier\nkable(head(REC.Vars,n=10)) %&gt;%\n   kable_styling(bootstrap_options = c(\"striped\"),full_width = T,font_size = 11) %&gt;%\n   scroll_box(height = \"300px\")\n\n\n\n\n\nEgo.nom\nEgo.prenom\nNobs.REC\n\n\n\n\nANDRE\n.\n4\n\n\nAMARE\nFRANCOISE\n15\n\n\nAMARE\nCATHERINE\n17\n\n\nALEMANDE\nCATHERINE\n50\n\n\nARNAUD\nFRANCOIS\n68\n\n\nARNAUD\nJOSEPH\n70\n\n\nARNAUD\nURSULLE\n71\n\n\nARNAUD\nMARGUERITE\n72\n\n\nARNAUD\nJEANNE\n73\n\n\nANTOINE\nANNE\n85\n\n\n\n\n\n\n\nPar une jointure classique, on veut sélectionner les individus portant le même nom et le même prénom dans les deux fichiers. On fait donc appel à une syntaxe inner_join.\nZ1 = BAP.Vars %&gt;%\n  inner_join(REC.Vars,by=c(\"PERE.Nom\"=\"Ego.nom\",\"PERE.Prenom\"=\"Ego.prenom\"))\n\n\n# Affichage début de fichier\nkable(head(Z1,n=10)) %&gt;%\n   kable_styling(bootstrap_options = c(\"striped\"),full_width = T,font_size = 11) %&gt;%\n   scroll_box(height = \"300px\")\n\n\n\n\n\nPERE.Nom\nPERE.Prenom\nNobs.BAP\nNobs.REC\n\n\n\n\nANTOINE\nJEAN\n10\n2953\n\n\nAUDON\nJEAN\n40\n148\n\n\nARNAUD\nFRANCOIS\n42\n68\n\n\nARNAUD\nCLAUDE\n48\n1870\n\n\nAUBERT\nJEAN\n220\n1227\n\n\nAUDIBERT\nLEON\n304\n1157\n\n\nAUDIBERT\nJEAN\n333\n3183\n\n\nABEILLE\nJOSEPH\n1115\n625\n\n\nAUDIBERT\nJACQUES\n1437\n1156\n\n\nARDISSON\nJEAN\n1441\n4661\n\n\n\n\n\n\n\nOn souhaite maintenant unifier les individus portant le même prénom et différent d’une lettre sur le nom de famille, pour prendre en compte les variantes orthographiques minimes.\nZ2 = BAP.Vars %&gt;%\n  \n  # max_dist = Distance maximale de égale à un entre les deux patronymes\n  # distance_col =  nom de la variable créée contenant la valeur de distance\n  stringdist_inner_join(REC.Vars,by=c(\"PERE.Nom\"=\"Ego.nom\"),max_dist=1,distance_col=\"V_Dist\") %&gt;%\n  \n  # On ne garde que les distances égales à 1\n  filter(V_Dist==1) %&gt;%\n  \n  # On ne conserve que les individus de même prénom\n  filter(stringdist(PERE.Prenom,Ego.prenom)==0) %&gt;%\n  \n  # Suppression variable de distance\n  select(-V_Dist)\n\n\n# Affichage début de fichier\nkable(head(Z2,n=30)) %&gt;%\n   kable_styling(bootstrap_options = c(\"striped\"),full_width = T,font_size = 11) %&gt;%\n   scroll_box(height = \"300px\")\n\n\n\n\n\nPERE.Nom\nPERE.Prenom\nNobs.BAP\nEgo.nom\nEgo.prenom\nNobs.REC\n\n\n\n\nAUBERTE\nJOSEPH\n78\nAUBERT\nJOSEPH\n5052\n\n\nAMIEL\nPONCET\n234\nAMIELH\nPONCET\n328\n\n\nANTHOINE\nJEAN\n518\nANTOINE\nJEAN\n2953\n\n\nAUDIBERTE\nPIERRE\n587\nAUDIBERT\nPIERRE\n2677\n\n\nARNAUDE\nCLAUDE\n673\nARNAUD\nCLAUDE\n1870\n\n\nAUDIBERTE\nLEON\n765\nAUDIBERT\nLEON\n1157\n\n\nAUBERT\nPIERRE\n970\nAUBRET\nPIERRE\n2998\n\n\nAUTRAN\nJEAN\n1026\nAUBRAN\nJEAN\n5192\n\n\nACHARDE\nCLAUDE\n1502\nACHARD\nCLAUDE\n2060\n\n\nANTHOINE\nPIERRE\n2027\nANTOINE\nPIERRE\n2952\n\n\nACHARDE\nJEAN\n2363\nACHARD\nJEAN\n2057\n\n\nARNAUDE\nPIERRE\n2427\nARNAUD\nPIERRE\n1757\n\n\nALIS\nJOSEPH\n2537\nALIX\nJOSEPH\n1499\n\n\nAYNAUD\nJOSEPH\n3176\nARNAUD\nJOSEPH\n70\n\n\nAUBINE\nJACQUES\n3703\nAUBIN\nJACQUES\n2181\n\n\nAUTRANE\nANTOINE\n3801\nAUTRAN\nANTOINE\n5040\n\n\nAUDIBERTE\nJEAN\n3844\nAUDIBERT\nJEAN\n3183\n\n\nANTHEMAN\nPAUL\n3872\nAUTHEMAN\nPAUL\n5353\n\n\nALLEMAND\nHONNORE\n4017\nALEMAND\nHONNORE\n2853\n\n\nARNAUDE\nSEBASTIEN\n4075\nARNAUD\nSEBASTIEN\n3937\n\n\nAUBERT\nJEAN PIERRE\n4095\nAUBRET\nJEAN PIERRE\n4843\n\n\nAUDIBERTE\nANTOINE\n4112\nAUDIBERT\nANTOINE\n5017\n\n\nARMIOU\nANTOINE\n4130\nARMIEU\nANTOINE\n4320\n\n\nAUTIERE\nANDRE\n4195\nAUGIERE\nANDRE\n4856\n\n\nAUTIERE\nANDRE\n4195\nAUZIERE\nANDRE\n7942\n\n\nARNAUDE\nESTIENNE\n4197\nARNAUD\nESTIENNE\n5236\n\n\nACHART\nJEAN\n4204\nACHARD\nJEAN\n2057\n\n\nAUDIERE\nJEAN\n4337\nAUDIER\nJEAN\n5163\n\n\nACHARDE\nLOUIS\n4342\nACHARD\nLOUIS\n3386\n\n\nAUBRANT\nJEAN\n4481\nAUBRAN\nJEAN\n5192"
  },
  {
    "objectID": "R/assist/posts/import_json/JSON.html",
    "href": "R/assist/posts/import_json/JSON.html",
    "title": "Format JSON : de la liste au dataframe",
    "section": "",
    "text": "Pour importer des données au format JSON, nous proposons deux packages rjson et jsonlite. Le dernier est beaucoup plus facile d’utilisation et renvoie automatiquement une base de donnée faites de colonnes. Je propose rjson comme une alternative à jsonlite en cas de pépin."
  },
  {
    "objectID": "R/assist/posts/import_json/JSON.html#footnotes",
    "href": "R/assist/posts/import_json/JSON.html#footnotes",
    "title": "Format JSON : de la liste au dataframe",
    "section": "Notes de bas de page",
    "text": "Notes de bas de page\n\n\nhttps://ressources.data.sncf.com/explore/dataset/menus-des-bars-tgv/table/↩︎\nPour découvrir comment utiliser des listes : https://juba.github.io/tidyverse/16-structures-donnees.html#sec-listes↩︎"
  }
]